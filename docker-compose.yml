services:
  main_app:
    build:
      context: .
      dockerfile: dockerfile
    deploy:
      replicas: 1
    command: ["fastapi", "run", "app/main.py", "--port", "80"]
    environment:
      FLASK_ENV: ${FLASK_ENV}
      # DATABASE_URL: postgresql+psycopg2://${DATABASE_USER}:${DATABASE_PASS}@host.docker.internal:5432/vocab_db
      X_API_KEY: ${X_API_KEY}
      SECRET_KEY: ${SECRET_KEY}
      USER_NAME: ${USER_NAME}
      USER_PASSWORD: ${USER_PASSWORD}
      ALLOW_ORIGIN: ${ALLOW_ORIGIN}
    ports:
      - 80:80
    depends_on:
      db:
        condition: service_healthy
# https://www.docker.com/blog/how-to-use-the-postgres-docker-official-image/#Why-should-you-containerize-Postgres
  db:
    container_name: postgres
    restart: always
    image: postgres:15
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASS}
      POSTGRES_DB: vocab_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - 5432:5432
  # nginx:
  #   image: nginx:latest
  #   container_name: nginx
  #   ports:
  #     - "80:80"  # Expose Nginx to the host on port 80
  #   depends_on:
  #     - main_app  # Ensure Node.js starts before Nginx
  #   networks:
  #     - loadbalancing # Creates a custom network

  # networks:
  #   loadbalancing:
  #     driver: bridge

volumes:
  pgdata:
